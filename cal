import java.util.Stack;
import javax.swing.JOptionPane;
import java.io.FileWriter;
import java.io.IOException;

public class PostScript {
    private static Stack<Double> pila = new Stack<>(); 
    //almacena valores numericos mientras las expresiones son evaluadas
    private static FileWriter archivoBitacora; 
    //este objeto sirve para registrar los errores en un archivo bitacora
  

    public static void main(String[] args) {
    //cofigura y abre el archivo bitacora
        try {
            archivoBitacora = new FileWriter("bitacora_postscript.log");
        } catch (IOException e) {
            e.printStackTrace();
        }

        //bucle prinicipal para verificar las expresiones PostScript del usuario
        while (true) {
            String entrada = JOptionPane.showInputDialog("Ingrese una expresión PostScript (o 'salir' para salir):\nEjemplo: 5 3 add (para sumar 5 y 3)");

            if (entrada == null || entrada.equalsIgnoreCase("salir")) {
                break;
            }

            try {
                //llama al metodo evaluarExpresionPostScript para evaluar expresiones y manejar errores
                evaluarExpresionPostScript(entrada);
           
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                registrarError(e.getMessage());
            }
        }

        //cierra la bitacora y muestra el mensaje de salida
        try {
            archivoBitacora.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        JOptionPane.showMessageDialog(null, "Saliendo del programa.");
    }

    private static void evaluarExpresionPostScript(String expresion) {
        //divide la expresion (con espacios en blanco) en tokens 
        String[] tokens = expresion.split("\\s+");

        for (String token : tokens) {
            if (token.matches("-?\\d+(\\.\\d+)?")) {
                //apila los numeros en la pila
                pila.push(Double.parseDouble(token));

            } else if (esOperador(token)) {
                //realiza la operacion correspondiente al operador, tambien determina si un token es un operador valido
                realizarOperacion(token); //realiza las operaciones matematicas

            } else if (token.startsWith("/")) {
                //definición de símbolos (ejemplo: /pi 3.141592653 def)
                // define un simbolo si comienza con '/'
                String simbolo = token.substring(1);
                pila.push(Double.parseDouble(simbolo));

            } else {
                //identifica cuando aparece un Token desconocido
                throw new IllegalArgumentException("Operador no reconocido: " + token);
            }
        }

        //verifica si la pila tiene un solo valor y muestra su resultado
        if (pila.size() == 1) {
            JOptionPane.showMessageDialog(null, "Resultado: " + pila.pop());
        } else {
            throw new IllegalArgumentException("La expresión es inválida o incompleta.");
        }
    }

    private static boolean esOperador(String token) { //verifica si un token (cadena) es un operador válido en el contexto de una expresión PostScript
        return "+".equals(token) || "-".equals(token) || "*".equals(token) || "/".equals(token);
        //devuelve true si el Token es un operador o false en caso de que no lo sea
    }

    private static void realizarOperacion(String operador) { 
    //realiza las operaciones matematicas con los valores alamcenados en la pila
        if (pila.size() < 2) {
            throw new IllegalArgumentException("No hay suficientes operandos en la pila para " + operador);
            //verifica que haya al menos dos valores en la pila para realizar la operacion
        }

        //los dos valores superiores de la pila
        double b = pila.pop();
        double a = pila.pop();

        switch (operador) { //determina que operacion realizar de acuerdo al operador proporcionado
            case "+":
                pila.push(a + b);
                break;
            case "-":
                pila.push(a - b);
                break;
            case "*":
                pila.push(a * b);
                break;
            case "/":
                if (b == 0) {
                    throw new IllegalArgumentException("No se puede dividir por cero.");
                }
                pila.push(a / b);
                break;
        }
    }

    private static void registrarError(String mensajeError) {
    //registra un mensaje  de error en la bitacora
        try {
            archivoBitacora.write("Error: " + mensajeError + "\n");
            archivoBitacora.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
